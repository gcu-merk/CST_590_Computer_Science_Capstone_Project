# GitHub Actions CI/CD Workflow for Traffic Monitoring System
# Deploys to Raspberry Pi 5 using hybrid architecture (host + containers)

name: Deploy Traffic Monitoring System

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/host-camera-capture.py'
      - 'deployment/**'
      - 'docker-compose.yml'
      - 'edge_processing/**'
      - 'edge_api/**'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deployment even if validation fails'
        required: false
        default: false
        type: boolean

env:
  DEPLOY_USER: merk
  DEPLOY_HOST: ${{ secrets.PI_HOST }}
  DEPLOY_KEY: ${{ secrets.PI_SSH_KEY }}
  DOCKER_IMAGE: gcumerk/cst590-capstone-public:latest

jobs:
  validate:
    name: Validate Deployment Package
    runs-on: ubuntu-latest
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Validate required files
      id: validation
      run: |
        echo "Validating deployment package..."
        
        # Check required files exist
        required_files=(
          "scripts/host-camera-capture.py"
          "deployment/host-camera-capture.service"
          "deployment/deploy.sh"
          "docker-compose.yml"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Validate Python syntax
        python3 -m py_compile scripts/host-camera-capture.py
        
        # Validate docker-compose syntax (using newer docker compose command)
        docker compose -f docker-compose.yml config > /dev/null
        
        echo "ready=true" >> $GITHUB_OUTPUT
        echo "✅ Deployment package validation passed"

  deploy:
    name: Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.deployment-ready == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.PI_SSH_KEY }}
        
    - name: Add Pi to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PI_HOST }} >> ~/.ssh/known_hosts
        
    - name: Copy deployment files to Pi
      run: |
        echo "📦 Copying deployment files to Raspberry Pi..."
        
        # Create remote directory
        ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/deployment-staging"
        
        # Copy project files
        rsync -avz --delete \
          --exclude='.git*' \
          --exclude='documentation/' \
          --exclude='*.md' \
          --exclude='test_*' \
          --exclude='__pycache__/' \
          ./ $DEPLOY_USER@$DEPLOY_HOST:~/deployment-staging/
          
    - name: Deploy Host Camera Service
      run: |
        echo "📹 Deploying Host Camera Service..."
        
        ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          cd ~/deployment-staging
          
          # Install and start host camera service
          sudo cp deployment/host-camera-capture.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable host-camera-capture
          sudo systemctl restart host-camera-capture
          
          # Wait for first capture
          echo "⏳ Waiting 70 seconds for first camera capture..."
          sleep 70
          
          # Verify fresh image exists
          if ! find /mnt/storage/camera_capture/live/ -name "capture_*.jpg" -mtime -1; then
            echo "ERROR: Camera service failed to capture images"
            sudo systemctl status host-camera-capture --no-pager -l
            exit 1
          fi
          
          echo "✅ Host camera service deployed and capturing images"
        EOF
        
    - name: Execute deployment on Pi
      id: deploy
      run: |
        echo "🚀 Executing remaining deployment on Raspberry Pi..."
        
        # Execute deployment script with proper error handling
        ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          cd ~/deployment-staging
          
          # Make deployment script executable
          chmod +x deployment/deploy.sh
          
          # Run deployment with logging - use the staging directory as project root
          echo "Starting CI/CD deployment at $(date)"
          if ./deployment/deploy.sh 2>&1 | tee deployment.log; then
            echo "✅ Deployment successful"
            echo "deployment_status=success" >> deployment.env
          else
            echo "❌ Deployment failed"
            echo "deployment_status=failed" >> deployment.env
            exit 1
          fi
        EOF
        
    - name: Validate deployment
      if: steps.deploy.outcome == 'success'
      run: |
        echo "🔍 Validating deployment..."
        
        ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
          set -e
          
          # Check host service
          if ! systemctl is-active --quiet host-camera-capture; then
            echo "❌ Host camera service not running"
            systemctl status host-camera-capture --no-pager
            exit 1
          fi
          echo "✅ Host camera service is running"
          
          # Check containers
          cd ~/deployment-staging
          if ! docker-compose ps | grep -q "Up"; then
            echo "❌ Containers not running properly"
            docker-compose ps
            exit 1
          fi
          echo "✅ Containers are running"
          
          # Check API endpoint
          sleep 10
          if ! curl -f -s http://localhost:5000/api/health >/dev/null; then
            echo "⚠️ API not responding immediately (may need more time)"
          else
            echo "✅ API is responding"
          fi
          
          echo "🎉 Deployment validation completed"
        EOF
        
    - name: Cleanup staging files
      if: always()
      run: |
        ssh $DEPLOY_USER@$DEPLOY_HOST "rm -rf ~/deployment-staging"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Traffic Monitoring System deployed successfully!"
        echo "🌐 Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        
    - name: Deployment Failure Notification
      if: needs.deploy.result == 'failure' || needs.validate.result == 'failure'
      run: |
        echo "❌ Traffic Monitoring System deployment failed!"
        echo "🌐 Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "📊 Commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        exit 1