name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: self-hosted
    # Only deploy from main branch to production Pi (unless force_deploy is true)
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.inputs.force_deploy == 'true')) || (github.event_name == 'workflow_dispatch' && (github.ref_name == 'main' || github.event.inputs.force_deploy == 'true')) }}
    
    steps:
      - name: Check deployment environment
        run: |
          echo "=== Deployment Environment Check ==="
          echo "Current user: $(whoami)"
          echo "Working directory: $(pwd)"
          echo "Docker status:"
          docker --version
          docker compose --version
          echo "Available disk space:"
          df -h
          
      - name: Create deployment directory
        run: |
          echo "=== Setting up deployment directory ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          mkdir -p "$DEPLOY_DIR"
          cd "$DEPLOY_DIR"
          echo "Deployment directory: $DEPLOY_DIR"
          
      - name: Download docker-compose.yml
        run: |
          echo "=== Downloading docker-compose.yml ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/docker-compose.yml -o docker-compose.yml
          echo "Downloaded docker-compose.yml"
          cat docker-compose.yml
          
      - name: Stop existing containers
        run: |
          echo "=== Stopping existing containers ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          docker compose down --remove-orphans || echo "No existing containers to stop"
          
      - name: Pull latest Docker images
        run: |
          echo "=== Pulling latest Docker images ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          docker compose pull
          
      - name: Deploy new containers
        run: |
          echo "=== Starting new containers ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          docker compose up -d
          
      - name: Install Pi-specific packages
        run: |
          echo "=== Installing Pi-specific packages ==="
          # Wait for container to be ready
          sleep 10
          
          # Install packages in the main application container
          CONTAINER_NAME=$(docker compose ps --format "table {{.Service}}" | grep -v SERVICE | head -1)
          if [ ! -z "$CONTAINER_NAME" ]; then
            echo "Installing packages in container: $CONTAINER_NAME"
            docker compose exec -T "$CONTAINER_NAME" pip install --no-cache-dir picamera2 gpiozero RPi.GPIO gpustat || echo "Package installation completed with warnings"
          else
            echo "No container found for package installation"
          fi
          
      - name: Verify deployment
        run: |
          echo "=== Verifying deployment ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          echo "Container status:"
          docker compose ps
          
          echo "Container logs (last 20 lines):"
          docker compose logs --tail=20
          
          echo "System resources:"
          docker stats --no-stream
          
          # Test API endpoint if available
          sleep 5
          curl -f http://localhost:5000/api/health || echo "API health check failed or not available yet"
          
      - name: Deployment summary
        run: |
          echo "=== Deployment Summary ==="
          echo "‚úÖ Deployment completed successfully"
          echo "üìç Deployment directory: /home/$(whoami)/traffic-monitor-deploy"
          echo "üê≥ Containers:"
          docker compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"
          echo "üåê Access dashboard at: http://$(hostname -I | awk '{print $1}'):5000"
