name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: self-hosted
    # Only deploy from main branch to production Pi (unless force_deploy is true)
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.head_branch == 'main' || github.event.inputs.force_deploy == 'true')) || (github.event_name == 'workflow_dispatch' && (github.ref_name == 'main' || github.event.inputs.force_deploy == 'true')) }}
    
    steps:
      - name: Check deployment environment
        run: |
          echo "=== Deployment Environment Check ==="
          echo "Current user: $(whoami)"
          echo "Working directory: $(pwd)"
          echo "Docker status:"
          docker --version
          docker compose --version
          echo "Available disk space:"
          df -h
          
      - name: Create deployment directory
        run: |
          echo "=== Setting up deployment directory ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          mkdir -p "$DEPLOY_DIR"
          cd "$DEPLOY_DIR"
          echo "Deployment directory: $DEPLOY_DIR"
          
      - name: Download deployment files
        run: |
          echo "=== Downloading deployment files ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          # Download core deployment files only (excluding documentation)
          echo "Downloading core application files..."
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/docker-compose.yml -o docker-compose.yml
          echo "Downloaded docker-compose.yml"
          
          # Create deployment directory
          mkdir -p deployment
          
          # Download host camera capture service files
          echo "Downloading host camera service files..."
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/scripts/host-camera-capture.py -o host-camera-capture.py
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/deployment/host-camera-capture.service -o deployment/host-camera-capture.service
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/deployment/deploy.sh -o deployment/deploy.sh
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/deployment/verify-deployment.sh -o deployment/verify-deployment.sh
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/deployment/health-check.sh -o deployment/health-check.sh
          
          # Set permissions
          chmod +x host-camera-capture.py
          chmod +x deployment/deploy.sh
          chmod +x deployment/verify-deployment.sh
          chmod +x deployment/health-check.sh
          
          echo "✅ Downloaded production files only (documentation folder excluded)"
          echo "📁 Files in deployment directory:"
          ls -la
          ls -la deployment/
          chmod +x deployment/deploy.sh
          
          echo "Downloaded all deployment files"
          
      - name: Deploy Host Camera Capture Service
        run: |
          echo "=== Deploying Host Camera Capture Service ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          # Run the enhanced deployment script
          ./deployment/deploy.sh
          
      - name: Verify Host Camera Integration
        run: |
          echo "=== Verifying Host Camera Integration ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          # Wait for services to stabilize
          sleep 30
          
          # Check service status
          sudo systemctl is-active host-camera-capture
          echo "Host camera service status:"
          sudo systemctl status host-camera-capture --no-pager -l | head -10
          
          # Check Docker services
          echo "Docker services status:"
          docker-compose ps
          
          # Test endpoints
          echo "Testing API health endpoint:"
          curl -f http://localhost:5000/api/health || echo "API not yet available"
          
          # Verify recent image capture
          echo "Checking for recent captures:"
          find /mnt/storage/camera_capture/live/ -name "capture_*.jpg" -mtime -1 | head -5 || echo "No recent captures found yet"
          
      - name: Install Pi-specific packages
        run: |
          echo "=== Installing Pi-specific packages ==="
          # Wait for container to be ready
          sleep 10
          
          # Install packages in the main application container
          CONTAINER_NAME=$(docker compose ps --format "table {{.Service}}" | grep -v SERVICE | head -1)
          if [ ! -z "$CONTAINER_NAME" ]; then
            echo "Installing packages in container: $CONTAINER_NAME"
            docker compose exec -T "$CONTAINER_NAME" pip install --no-cache-dir picamera2 gpiozero RPi.GPIO gpustat || echo "Package installation completed with warnings"
          else
            echo "No container found for package installation"
          fi
          
      - name: Verify deployment
        run: |
          echo "=== Verifying complete deployment ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          echo "=== Host Camera Service ==="
          sudo systemctl status host-camera-capture --no-pager | head -8
          
          echo "=== Docker Services ==="
          docker-compose ps
          
          echo "=== Recent Captures ==="
          ls -la /mnt/storage/camera_capture/live/ | tail -5 || echo "Capture directory not yet populated"
          
          echo "=== Storage Usage ==="
          du -sh /mnt/storage/camera_capture/ 2>/dev/null || echo "Storage info not available"
          
          echo "=== API Health ==="
          curl -s http://localhost:5000/api/health | python3 -m json.tool 2>/dev/null || echo "API health check not available yet"
          
      - name: Verify maintenance system
        run: |
          echo "=== Maintenance System Verification ==="
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          cd "$DEPLOY_DIR"
          
          # Download verification script
          echo "Downloading maintenance verification script..."
          curl -fsSL https://raw.githubusercontent.com/gcu-merk/CST_590_Computer_Science_Capstone_Project/main/verify-maintenance-deployment.sh -o verify-maintenance-deployment.sh
          chmod +x verify-maintenance-deployment.sh
          
          echo "🔧 Maintenance System Status:"
          if docker ps | grep -q "traffic-maintenance.*Up"; then
            echo "  ✅ Automated maintenance service: Running"
            echo "  🕐 Daily cleanup scheduled for 2:00 AM"
            echo "  📊 Monitor: docker logs traffic-maintenance -f"
          elif docker exec traffic-monitor test -f /app/scripts/container-maintenance.py 2>/dev/null; then
            echo "  ⚠️  Maintenance scripts available in main container"
            echo "  🧹 Manual cleanup: docker exec traffic-monitor python3 /app/scripts/container-maintenance.py --daily-cleanup"
          else
            echo "  ❌ Maintenance system not detected"
          fi
          
          echo ""
          echo "🔍 Running full maintenance verification..."
          ./verify-maintenance-deployment.sh || echo "Verification script completed with warnings"
          
      - name: Deployment summary
        run: |
          echo "=== Deployment Summary ==="
          echo "✅ Deployment completed successfully"
          DEPLOY_DIR="/home/$(whoami)/traffic-monitor-deploy"
          echo "📁 Deployment directory: $DEPLOY_DIR"
          echo "🐳 Containers:"
          cd "$DEPLOY_DIR"
          docker compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}" || echo "Container status unavailable"
          echo "🌐 Access dashboard at: http://$(hostname -I | awk '{print $1}'):5000"
          echo ""
          echo "🔧 Maintenance System: See verification step above for details"
          echo "🔍 Full verification script: bash verify-maintenance-deployment.sh"