name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

env:
  DEPLOY_USER: merk
  DEPLOY_HOST: ${{ secrets.PI_HOST }}
  DEPLOY_KEY: ${{ secrets.PI_SSH_KEY }}
  DOCKER_IMAGE: gcumerk/cst590-capstone-public:latest

jobs:
  validate:
    name: Validate Deployment Package
    runs-on: ubuntu-latest
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Validate required files
        id: validation
        run: |
          echo "Validating deployment package..."
          required_files=(
            "scripts/host-camera-capture.py"
            "deployment/host-camera-capture.service"
            "deployment/deploy.sh"
            "docker-compose.yml"
          )
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          python3 -m py_compile scripts/host-camera-capture.py
          echo "Validating docker-compose configuration..."
          docker compose -f docker-compose.yml config > /dev/null
          if ! docker compose -f docker-compose.yml config | grep -q "redis:"; then
            echo "‚ùå Redis service not found in docker-compose.yml"
            exit 1
          fi
          echo "Validating Redis dependencies..."
          if ! grep -q "redis" edge_processing/requirements-cloud.txt; then
            echo "‚ùå Redis not found in edge_processing requirements"
            exit 1
          fi
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment package validation passed (including Redis)"

  build_and_deploy:
    name: Deploy to Raspberry Pi
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.deployment-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PI_SSH_KEY }}
      - name: Add Pi to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PI_HOST }} >> ~/.ssh/known_hosts
      - name: Copy deployment files to Pi
        run: |
          echo "üì¶ Copying deployment files to Raspberry Pi..."
          ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/deployment-staging"
          rsync -avz --delete \
            --exclude='.git*' \
            --exclude='documentation/' \
            --exclude='*.md' \
            --exclude='test_*' \
            --exclude='__pycache__/' \
            ./ $DEPLOY_USER@$DEPLOY_HOST:~/deployment-staging/
      - name: Execute deployment on Pi
        id: deploy
        run: |
          echo "üöÄ Executing deployment on Raspberry Pi..."
          ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            set -e
            # Ensure all required directories exist and have correct permissions
            mkdir -p ~/deployment-staging
            chmod 755 ~/deployment-staging
            mkdir -p /mnt/storage/camera_capture/live
            chmod 775 /mnt/storage/camera_capture/live
            mkdir -p /mnt/storage/camera_capture/processed
            chmod 775 /mnt/storage/camera_capture/processed
            mkdir -p /mnt/storage/periodic_snapshots
            chmod 775 /mnt/storage/periodic_snapshots
            # Add more directories here as needed
            cd ~/deployment-staging
            chmod +x deployment/deploy.sh
            ./deployment/deploy.sh 2>&1 | tee deployment.log
          EOF
      - name: Validate deployment
        if: steps.deploy.outcome == 'success'
        run: |
          echo "üîç Validating deployment..."
          ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            set -e
            if ! systemctl is-active --quiet host-camera-capture; then
              echo "‚ùå Host camera service not running"
              systemctl status host-camera-capture --no-pager
              exit 1
            fi
            echo "‚úÖ Host camera service is running"
            cd ~/deployment-staging
            echo "üîç Checking container status..."
            docker-compose ps
            if ! docker-compose ps | grep -q "Up"; then
              echo "‚ùå Containers not running properly"
              docker-compose ps
              exit 1
            fi
            echo "‚úÖ Containers are running"
            echo "üîç Checking Redis service..."
            if ! docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
              echo "‚ùå Redis service not responding"
              docker-compose logs redis
              exit 1
            fi
            echo "‚úÖ Redis service is responding"
            echo "üîç Testing Redis connectivity from main service..."
            sleep 5
            if ! docker-compose logs traffic-monitor | grep -q "Connected to Redis\|Redis"; then
              echo "‚ö†Ô∏è No Redis connection logs found (may still be connecting)"
            else
              echo "‚úÖ Traffic monitor connected to Redis"
            fi
            echo "üîç Testing API endpoint..."
            sleep 10
            if ! curl -f -s http://localhost:5000/api/health >/dev/null; then
              echo "‚ö†Ô∏è API not responding immediately (may need more time)"
            else
              echo "‚úÖ API is responding"
            fi
            # Additional recommended SSD-based directories
            mkdir -p /mnt/storage/traffic-monitor-deploy
            chmod 755 /mnt/storage/traffic-monitor-deploy
            mkdir -p /mnt/storage/database/backups
            chmod 770 /mnt/storage/database/backups
            mkdir -p /mnt/storage/database/schema
            chmod 770 /mnt/storage/database/schema
            mkdir -p /mnt/storage/logs
            chmod 775 /mnt/storage/logs
            mkdir -p /mnt/storage/tmp
            chmod 777 /mnt/storage/tmp
            mkdir -p /mnt/storage/cache
            chmod 777 /mnt/storage/cache
            mkdir -p /mnt/storage/data-maintenance
            chmod 770 /mnt/storage/data-maintenance
            mkdir -p /mnt/storage/data-consolidator
            chmod 770 /mnt/storage/data-consolidator
            mkdir -p /mnt/storage/license-plate-data-collection
            chmod 770 /mnt/storage/license-plate-data-collection
            mkdir -p /mnt/storage/speed-data-collection
            chmod 770 /mnt/storage/speed-data-collection
            mkdir -p /mnt/storage/stop-sign-data-collection
            chmod 770 /mnt/storage/stop-sign-data-collection
            mkdir -p /mnt/storage/utils
            chmod 770 /mnt/storage/utils
            # Remove SD card-based traffic-monitor-deploy
            # If any code references /home/$(whoami)/traffic-monitor-deploy, update to /mnt/storage/traffic-monitor-deploy
            echo "üéâ Deployment validation completed (Redis + API + Host Service)"
          EOF
      - name: Cleanup staging files
        if: always()
        run: |
          ssh $DEPLOY_USER@$DEPLOY_HOST "rm -rf ~/deployment-staging"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate, build_and_deploy]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.build_and_deploy.result == 'success'
        run: |
          echo "‚úÖ Traffic Monitoring System deployed successfully!"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
      - name: Deployment Failure Notification
        if: needs.build_and_deploy.result == 'failure' || needs.validate.result == 'failure'
        run: |
          echo "‚ùå Traffic Monitoring System deployment failed!"
          echo "üåê Environment: production"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          exit 1
