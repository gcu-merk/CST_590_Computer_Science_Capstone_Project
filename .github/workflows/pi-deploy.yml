name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

env:
  DEPLOY_USER: merk
  DEPLOY_HOST: ${{ secrets.PI_HOST }}
  DEPLOY_KEY: ${{ secrets.PI_SSH_KEY }}
  DOCKER_IMAGE: gcumerk/cst590-capstone-public:latest

jobs:
  validate_deployment:
    name: Validate Deployment Package
    runs-on: ubuntu-latest
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Validate required files
        id: validation
        run: |
          echo "Validating deployment package..."
          required_files=(
            "scripts/host-camera-capture.py"
            "deployment/host-camera-capture.service"
            "deployment/deploy.sh"
            "docker-compose.yml"
          )
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          python3 -m py_compile scripts/host-camera-capture.py
          
          echo "Validating docker-compose configuration..."
          docker compose -f docker-compose.yml config > /dev/null
          
          if ! docker compose -f docker-compose.yml config | grep -q "redis:"; then
            echo "❌ Redis service not found in docker-compose.yml"
            exit 1
          fi
          
          echo "Validating Redis dependencies..."
          if ! grep -q "redis" edge_processing/requirements-cloud.txt; then
            echo "❌ Redis not found in edge_processing requirements"
            exit 1
          fi
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment package validation passed (including Redis)"

  deploy_to_pi:
    name: Deploy to Raspberry Pi
    # Require a self-hosted runner with the 'raspberrypi' label so these
    # steps (creating /mnt/storage, rsync, docker-compose, systemctl checks)
    # only run on the Raspberry Pi runner and not on other self-hosted machines.
    runs-on: [self-hosted, raspberrypi]
    needs: validate_deployment
    if: needs.validate_deployment.outputs.deployment-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Prepare deployment staging
        run: |
          echo "📦 Preparing deployment staging directory on SSD..."
          # Ensure all required directories exist and have correct permissions
          
          # Deployment staging directories
          sudo mkdir -p /mnt/storage/deployment-staging
          sudo chmod 755 /mnt/storage/deployment-staging
          sudo chown merk:merk /mnt/storage/deployment-staging
          sudo mkdir -p /mnt/storage/deployment-staging/config
          sudo chmod 755 /mnt/storage/deployment-staging/config
          sudo chown merk:merk /mnt/storage/deployment-staging/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/data_fusion
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/data_fusion
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/data_fusion
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/data_fusion/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/data_fusion/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/data_fusion/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/messaging
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/messaging
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/messaging
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/messaging/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/messaging/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/messaging/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/speed_analysis
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/speed_analysis
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/speed_analysis
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/speed_analysis/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/speed_analysis/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/speed_analysis/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/system_health
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/system_health
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/system_health
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/system_health/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/system_health/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/system_health/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/vehicle_detection
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/vehicle_detection
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/vehicle_detection
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/vehicle_detection/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/vehicle_detection/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/vehicle_detection/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/weather_analysis
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/weather_analysis
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/weather_analysis
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/weather_analysis/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/weather_analysis/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/weather_analysis/config
          sudo mkdir -p /mnt/storage/deployment-staging/edge_processing/config
          sudo chmod 755 /mnt/storage/deployment-staging/edge_processing/config
          sudo chown merk:merk /mnt/storage/deployment-staging/edge_processing/config
          
          # DHT22 weather service directory
          sudo mkdir -p /mnt/storage/dht22-weather
          sudo chmod 755 /mnt/storage/dht22-weather
          sudo chown merk:merk /mnt/storage/dht22-weather
          sudo mkdir -p /mnt/storage/dht22-weather/logs
          sudo chmod 755 /mnt/storage/dht22-weather/logs
          sudo chown merk:merk /mnt/storage/dht22-weather/logs
          sudo mkdir -p /mnt/storage/dht22-weather/config
          sudo chmod 755 /mnt/storage/dht22-weather/config
          sudo chown merk:merk /mnt/storage/dht22-weather/config
          
          # Camera capture directories (from both sources)
          sudo mkdir -p /mnt/storage/camera_capture/live
          sudo chmod 775 /mnt/storage/camera_capture/live
          sudo chown merk:merk /mnt/storage/camera_capture/live
          sudo mkdir -p /mnt/storage/camera_capture/processed
          sudo chmod 775 /mnt/storage/camera_capture/processed
          sudo chown merk:merk /mnt/storage/camera_capture/processed
          sudo mkdir -p /mnt/storage/camera_capture/metadata
          sudo chmod 775 /mnt/storage/camera_capture/metadata
          sudo chown merk:merk /mnt/storage/camera_capture/metadata
          
          # Snapshot and AI processing directories
          sudo mkdir -p /mnt/storage/periodic_snapshots
          sudo chmod 775 /mnt/storage/periodic_snapshots
          sudo chown merk:merk /mnt/storage/periodic_snapshots
          sudo mkdir -p /mnt/storage/ai_camera_images
          sudo chmod 775 /mnt/storage/ai_camera_images
          sudo chown merk:merk /mnt/storage/ai_camera_images
          sudo mkdir -p /mnt/storage/processed_data
          sudo chmod 775 /mnt/storage/processed_data
          sudo chown merk:merk /mnt/storage/processed_data
          
          # Traffic monitor deployment
          sudo mkdir -p /mnt/storage/traffic-monitor-deploy
          sudo chmod 755 /mnt/storage/traffic-monitor-deploy
          sudo chown merk:merk /mnt/storage/traffic-monitor-deploy
          
          # Database directories
          sudo mkdir -p /mnt/storage/database/backups
          sudo chmod 770 /mnt/storage/database/backups
          sudo chown merk:merk /mnt/storage/database/backups
          sudo mkdir -p /mnt/storage/database/schema
          sudo chmod 770 /mnt/storage/database/schema
          sudo chown merk:merk /mnt/storage/database/schema
          
          # Backup directories (generic backups)
          sudo mkdir -p /mnt/storage/backups
          sudo chmod 775 /mnt/storage/backups
          sudo chown merk:merk /mnt/storage/backups
          
          # Logging directories (comprehensive)
          sudo mkdir -p /mnt/storage/logs
          sudo chmod 775 /mnt/storage/logs
          sudo chown merk:merk /mnt/storage/logs
          sudo mkdir -p /mnt/storage/logs/docker
          sudo chmod 775 /mnt/storage/logs/docker
          sudo chown merk:merk /mnt/storage/logs/docker
          sudo mkdir -p /mnt/storage/logs/applications
          sudo chmod 775 /mnt/storage/logs/applications
          sudo chown merk:merk /mnt/storage/logs/applications
          sudo mkdir -p /mnt/storage/logs/maintenance
          sudo chmod 775 /mnt/storage/logs/maintenance
          sudo chown merk:merk /mnt/storage/logs/maintenance
          sudo mkdir -p /mnt/storage/logs/system
          sudo chmod 775 /mnt/storage/logs/system
          sudo chown merk:merk /mnt/storage/logs/system
          
          # Redis data directory
          sudo mkdir -p /mnt/storage/redis_data
          sudo chmod 755 /mnt/storage/redis_data
          sudo chown merk:merk /mnt/storage/redis_data
          
          # Generic data directories
          sudo mkdir -p /mnt/storage/data
          sudo chmod 755 /mnt/storage/data
          sudo chown merk:merk /mnt/storage/data
          sudo mkdir -p /mnt/storage/config
          sudo chmod 755 /mnt/storage/config
          sudo chown merk:merk /mnt/storage/config
          sudo mkdir -p /mnt/storage/scripts
          sudo chmod 755 /mnt/storage/scripts
          sudo chown merk:merk /mnt/storage/scripts
          
          # Temporary and cache directories
          sudo mkdir -p /mnt/storage/tmp
          sudo chmod 777 /mnt/storage/tmp
          sudo chown merk:merk /mnt/storage/tmp
          sudo mkdir -p /mnt/storage/cache
          sudo chmod 777 /mnt/storage/cache
          sudo chown merk:merk /mnt/storage/cache
          
          # Data collection and maintenance services
          sudo mkdir -p /mnt/storage/data-maintenance
          sudo chmod 770 /mnt/storage/data-maintenance
          sudo chown merk:merk /mnt/storage/data-maintenance
          sudo mkdir -p /mnt/storage/data-consolidator
          sudo chmod 770 /mnt/storage/data-consolidator
          sudo chown merk:merk /mnt/storage/data-consolidator
          
          # Specialized data collection directories
          sudo mkdir -p /mnt/storage/license-plate-data-collection
          sudo chmod 770 /mnt/storage/license-plate-data-collection
          sudo chown merk:merk /mnt/storage/license-plate-data-collection
          sudo mkdir -p /mnt/storage/speed-data-collection
          sudo chmod 770 /mnt/storage/speed-data-collection
          sudo chown merk:merk /mnt/storage/speed-data-collection
          sudo mkdir -p /mnt/storage/stop-sign-data-collection
          sudo chmod 770 /mnt/storage/stop-sign-data-collection
          sudo chown merk:merk /mnt/storage/stop-sign-data-collection
          
          # Utilities directory
          sudo mkdir -p /mnt/storage/utils
          sudo chmod 770 /mnt/storage/utils
          sudo chown merk:merk /mnt/storage/utils
          
          # PostgreSQL data directory (for future database service)
          sudo mkdir -p /mnt/storage/postgres_data
          sudo chmod 700 /mnt/storage/postgres_data
          sudo chown merk:merk /mnt/storage/postgres_data

          # Copy deployment files to staging
          rsync -avz --delete \
            --exclude='.git*' \
            --exclude='documentation/' \
            --exclude='*.md' \
            --exclude='test_*' \
            --exclude='__pycache__/' \
            ./ /mnt/storage/deployment-staging/
            
          echo "✅ All directories created with proper permissions and ownership"
          echo "📋 Directory structure summary:"
          ls -la /mnt/storage/ | head -20
          echo "📋 Camera capture structure:"
          ls -la /mnt/storage/camera_capture/ 2>/dev/null || echo "Camera capture dirs will be created on first use"
            
      - name: Execute deployment
        run: |
          echo "🚀 Executing deployment on Raspberry Pi (self-hosted)..."
          set -e
          
          cd /mnt/storage/deployment-staging
            sudo chmod +x deployment/deploy.sh
            sudo ./deployment/deploy.sh 2>&1 | tee deployment.log
          
      - name: Validate deployment (run host-side script)
        run: |
          echo "🔍 Running host-side validation script from staging..."
          set -e
          cd /mnt/storage/deployment-staging
          sudo chmod +x deployment/validate_deployment.sh
          sudo deployment/validate_deployment.sh
          
      - name: Cleanup staging files (only on success)
        if: success()
        run: |
          echo "🧹 Cleaning up deployment staging directory..."
          sudo rm -rf /mnt/storage/deployment-staging

  notify_status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate_deployment, deploy_to_pi]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.deploy_to_pi.result == 'success'
        run: |
          echo "✅ Traffic Monitoring System deployed successfully!"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          
      - name: Deployment Failure Notification
        if: needs.deploy_to_pi.result == 'failure' || needs.validate_deployment.result == 'failure'
        run: |
          echo "❌ Traffic Monitoring System deployment failed!"
          echo "🌐 Environment: production"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          exit 1