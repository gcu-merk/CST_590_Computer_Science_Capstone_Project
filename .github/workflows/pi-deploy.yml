name: Deploy to Raspberry Pi (Remote)

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

env:
  DEPLOY_USER: merk
  PI_HOST: 100.121.231.16
  DOCKER_IMAGE: gcumerk/cst590-capstone-public:latest
  HOST_UID: 1000
  HOST_GID: 1000
  STORAGE_ROOT: /mnt/storage

jobs:
  validate_deployment:
    name: Validate Deployment Package
    runs-on: ubuntu-latest
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Validate required files
        id: validation
        run: |
          echo "Validating deployment package..."
          required_files=(
            "scripts/host-camera-capture.py"
            "deployment/host-camera-capture.service"
            "deployment/deploy.sh"
            "docker-compose.yml"
          )
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "Deployment package validation passed"

  deploy_to_pi:
    name: Deploy to Raspberry Pi
    runs-on: ubuntu-latest  # Changed from self-hosted to GitHub-hosted
    needs: validate_deployment
    if: needs.validate_deployment.outputs.deployment-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PI_SSH_KEY }}
        run: |
          # Create SSH directory with proper permissions
          install -d -m 700 ~/.ssh
          
          # Check if SSH private key secret is available
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "Error: PI_SSH_KEY secret not found!"
            echo "Please add your SSH private key to repository secrets as 'PI_SSH_KEY'"
            exit 1
          fi
          
          # Write SSH private key
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add Pi host to known hosts
          ssh-keyscan -H $PI_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Test SSH connection
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $DEPLOY_USER@$PI_HOST "echo 'SSH connection successful'"
        
      - name: Deploy to Pi via SSH
        run: |
          echo "Deploying to Raspberry Pi remotely..."
          
          # SSH connection options for reliability
          SSH_OPTS="-o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          SCP_OPTS="-o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          
          # Create staging directory on Pi
          ssh $SSH_OPTS $DEPLOY_USER@$PI_HOST "sudo mkdir -p /mnt/storage/deployment-staging && sudo chown $DEPLOY_USER:$DEPLOY_USER /mnt/storage/deployment-staging"
          
          # Copy deployment files (exclude .git directory to speed up transfer)
          scp $SCP_OPTS -r --exclude='.git' ./* $DEPLOY_USER@$PI_HOST:/mnt/storage/deployment-staging/
          
          # Run deployment script remotely
          ssh $SSH_OPTS $DEPLOY_USER@$PI_HOST "cd /mnt/storage/deployment-staging && sudo chmod +x deployment/deploy.sh && sudo -E ./deployment/deploy.sh"
          
      - name: Validate deployment remotely
        run: |
          echo "Running deployment validation remotely..."
          SSH_OPTS="-o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          ssh $SSH_OPTS $DEPLOY_USER@$PI_HOST "cd /mnt/storage/deployment-staging && sudo chmod +x deployment/validate_deployment.sh && sudo ./deployment/validate_deployment.sh"
          
      - name: Cleanup staging files
        if: always()
        run: |
          SSH_OPTS="-o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          ssh $SSH_OPTS $DEPLOY_USER@$PI_HOST "sudo rm -rf /mnt/storage/deployment-staging"

  notify_status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate_deployment, deploy_to_pi]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.deploy_to_pi.result == 'success'
        run: |
          echo "Traffic Monitoring System deployed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          
      - name: Deployment Failure Notification
        if: needs.deploy_to_pi.result == 'failure' || needs.validate_deployment.result == 'failure'
        run: |
          echo "Traffic Monitoring System deployment failed!"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.actor }}"
          exit 1