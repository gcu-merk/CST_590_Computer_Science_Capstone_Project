name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment regardless of branch'
        required: false
        default: 'false'

env:
  DEPLOY_USER: merk
  DEPLOY_HOST: ${{ secrets.PI_HOST }}
  DEPLOY_KEY: ${{ secrets.PI_SSH_KEY }}
  DOCKER_IMAGE: gcumerk/cst590-capstone-public:latest

jobs:
  validate_deployment:
    name: Validate Deployment Package
    runs-on: ubuntu-latest
    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Validate required files
        id: validation
        run: |
          echo "Validating deployment package..."
          required_files=(
            "scripts/host-camera-capture.py"
            "deployment/host-camera-capture.service"
            "deployment/deploy.sh"
            "docker-compose.yml"
          )
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Missing required files:"
            printf '%s\n' "${missing_files[@]}"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          python3 -m py_compile scripts/host-camera-capture.py
          
          echo "Validating docker-compose configuration..."
          docker compose -f docker-compose.yml config > /dev/null
          
          if ! docker compose -f docker-compose.yml config | grep -q "redis:"; then
            echo "❌ Redis service not found in docker-compose.yml"
            exit 1
          fi
          
          echo "Validating Redis dependencies..."
          if ! grep -q "redis" edge_processing/requirements-cloud.txt; then
            echo "❌ Redis not found in edge_processing requirements"
            exit 1
          fi
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ Deployment package validation passed (including Redis)"

  deploy_to_pi:
    name: Deploy to Raspberry Pi
    runs-on: self-hosted
    needs: validate_deployment
    if: needs.validate_deployment.outputs.deployment-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Prepare deployment staging
        run: |
          echo "📦 Preparing deployment staging directory on SSD..."
          # Ensure all required directories exist and have correct permissions
            sudo mkdir -p /mnt/storage/deployment-staging
            sudo chmod 755 /mnt/storage/deployment-staging
            sudo chown merk:merk /mnt/storage/deployment-staging
            sudo mkdir -p /mnt/storage/camera_capture/live
            sudo chmod 775 /mnt/storage/camera_capture/live
            sudo chown merk:merk /mnt/storage/camera_capture/live
            sudo mkdir -p /mnt/storage/camera_capture/processed
            sudo chmod 775 /mnt/storage/camera_capture/processed
            sudo chown merk:merk /mnt/storage/camera_capture/processed
            sudo mkdir -p /mnt/storage/periodic_snapshots
            sudo chmod 775 /mnt/storage/periodic_snapshots
            sudo chown merk:merk /mnt/storage/periodic_snapshots
            sudo mkdir -p /mnt/storage/traffic-monitor-deploy
            sudo chmod 755 /mnt/storage/traffic-monitor-deploy
            sudo chown merk:merk /mnt/storage/traffic-monitor-deploy
            sudo mkdir -p /mnt/storage/database/backups
            sudo chmod 770 /mnt/storage/database/backups
            sudo chown merk:merk /mnt/storage/database/backups
            sudo mkdir -p /mnt/storage/database/schema
            sudo chmod 770 /mnt/storage/database/schema
            sudo chown merk:merk /mnt/storage/database/schema
            sudo mkdir -p /mnt/storage/logs
            sudo chmod 775 /mnt/storage/logs
            sudo chown merk:merk /mnt/storage/logs
            sudo mkdir -p /mnt/storage/tmp
            sudo chmod 777 /mnt/storage/tmp
            sudo chown merk:merk /mnt/storage/tmp
            sudo mkdir -p /mnt/storage/cache
            sudo chmod 777 /mnt/storage/cache
            sudo chown merk:merk /mnt/storage/cache
            sudo mkdir -p /mnt/storage/data-maintenance
            sudo chmod 770 /mnt/storage/data-maintenance
            sudo chown merk:merk /mnt/storage/data-maintenance
            sudo mkdir -p /mnt/storage/data-consolidator
            sudo chmod 770 /mnt/storage/data-consolidator
            sudo chown merk:merk /mnt/storage/data-consolidator
            sudo mkdir -p /mnt/storage/license-plate-data-collection
            sudo chmod 770 /mnt/storage/license-plate-data-collection
            sudo chown merk:merk /mnt/storage/license-plate-data-collection
            sudo mkdir -p /mnt/storage/speed-data-collection
            sudo chmod 770 /mnt/storage/speed-data-collection
            sudo chown merk:merk /mnt/storage/speed-data-collection
            sudo mkdir -p /mnt/storage/stop-sign-data-collection
            sudo chmod 770 /mnt/storage/stop-sign-data-collection
            sudo chown merk:merk /mnt/storage/stop-sign-data-collection
            sudo mkdir -p /mnt/storage/utils
            sudo chmod 770 /mnt/storage/utils
            sudo chown merk:merk /mnt/storage/utils

          rsync -avz --delete \
            --exclude='.git*' \
            --exclude='documentation/' \
            --exclude='*.md' \
            --exclude='test_*' \
            --exclude='__pycache__/' \
            ./ /mnt/storage/deployment-staging/
            
      - name: Execute deployment
        run: |
          echo "🚀 Executing deployment on Raspberry Pi (self-hosted)..."
          set -e
          
          cd /mnt/storage/deployment-staging
            sudo chmod +x deployment/deploy.sh
            sudo ./deployment/deploy.sh 2>&1 | tee deployment.log
          
      - name: Validate deployment
        run: |
          echo "🔍 Validating deployment..."
          set -e
          
          if ! systemctl is-active --quiet host-camera-capture; then
            echo "❌ Host camera service not running"
            systemctl status host-camera-capture --no-pager
            exit 1
          fi
          echo "✅ Host camera service is running"
          
          cd /mnt/storage/deployment-staging
          echo "🔍 Checking container status..."
          docker-compose ps
          
          if ! docker-compose ps | grep -q "Up"; then
            echo "❌ Containers not running properly"
            docker-compose ps
            exit 1
          fi
          echo "✅ Containers are running"
          
          echo "🔍 Checking Redis service..."
          if ! docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
            echo "❌ Redis service not responding"
            docker-compose logs redis
            exit 1
          fi
          echo "✅ Redis service is responding"
          
          echo "🔍 Testing Redis connectivity from main service..."
          sleep 5
          if ! docker-compose logs traffic-monitor | grep -q "Connected to Redis\|Redis"; then
            echo "⚠️ No Redis connection logs found (may still be connecting)"
          else
            echo "✅ Traffic monitor connected to Redis"
          fi
          
          echo "🔍 Testing API endpoint..."
          sleep 10
          if ! curl -f -s http://localhost:5000/api/health >/dev/null; then
            echo "⚠️ API not responding immediately (may need more time)"
          else
            echo "✅ API is responding"
          fi
          
          echo "🎉 Deployment validation completed (Redis + API + Host Service)"
          
      - name: Cleanup staging files
        if: always()
        run: |
          echo "🧹 Cleaning up deployment staging directory..."
          sudo rm -rf /mnt/storage/deployment-staging

  notify_status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate_deployment, deploy_to_pi]
    if: always()
    steps:
      - name: Deployment Success Notification
        if: needs.deploy_to_pi.result == 'success'
        run: |
          echo "✅ Traffic Monitoring System deployed successfully!"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          
      - name: Deployment Failure Notification
        if: needs.deploy_to_pi.result == 'failure' || needs.validate_deployment.result == 'failure'
        run: |
          echo "❌ Traffic Monitoring System deployment failed!"
          echo "🌐 Environment: production"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          exit 1