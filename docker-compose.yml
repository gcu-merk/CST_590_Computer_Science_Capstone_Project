services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ${REDIS_DATA_PATH:-/mnt/storage/redis_data}:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=traffic_monitoring
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-/mnt/storage/postgres_data}:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traffic_user -d traffic_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5

  traffic-monitor:
    image: ${DOCKER_IMAGE:-gcumerk/cst590-capstone-public:latest}
    container_name: traffic-monitor
    ports:
      - "5000:5000"
    environment:
      - DOCKER_USER=${HOST_UID:-1000}:${HOST_GID:-1000}
      - STORAGE_ROOT=${STORAGE_ROOT:-/mnt/storage}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=traffic_monitoring
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
    volumes:
      - ${STORAGE_ROOT:-/mnt/storage}/camera_capture:/app/camera_capture
      - ${STORAGE_ROOT:-/mnt/storage}/processed_data:/app/processed_data
      - ${STORAGE_ROOT:-/mnt/storage}/logs:/app/logs
      - ${STORAGE_ROOT:-/mnt/storage}/ai_camera_images:/app/ai_camera_images
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"

  data-maintenance:
    image: ${DOCKER_IMAGE:-gcumerk/cst590-capstone-public:latest}
    container_name: data-maintenance
    environment:
      - DOCKER_USER=${HOST_UID:-1000}:${HOST_GID:-1000}
      - STORAGE_ROOT=${STORAGE_ROOT:-/mnt/storage}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=traffic_monitoring
      - POSTGRES_USER=traffic_user
      - POSTGRES_PASSWORD=traffic_password
    volumes:
      - ${STORAGE_ROOT:-/mnt/storage}:/mnt/storage
      - ${STORAGE_ROOT:-/mnt/storage}/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"

  airport-weather:
    image: ${DOCKER_IMAGE:-gcumerk/cst590-capstone-public:latest}
    container_name: airport-weather
    environment:
      - DOCKER_USER=${HOST_UID:-1000}:${HOST_GID:-1000}
      - STORAGE_ROOT=${STORAGE_ROOT:-/mnt/storage}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ${STORAGE_ROOT:-/mnt/storage}/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"

  dht22-weather:
    image: ${DOCKER_IMAGE:-gcumerk/cst590-capstone-public:latest}
    container_name: dht22-weather
    environment:
      - DOCKER_USER=${HOST_UID:-1000}:${HOST_GID:-1000}
      - STORAGE_ROOT=${STORAGE_ROOT:-/mnt/storage}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ${STORAGE_ROOT:-/mnt/storage}/logs:/app/logs
      - /sys:/sys:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - traffic-monitoring-network
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    privileged: true  # Needed for GPIO access

networks:
  traffic-monitoring-network:
    driver: bridge