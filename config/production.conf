# Traffic Monitoring System - Production Configuration
# Implements all recommended technology improvements for Raspberry Pi 5

[system]
# Raspberry Pi 5 optimized settings
platform = raspberry_pi_5
cpu_cores = 4
memory_limit_mb = 8192
gpu_memory_mb = 128
enable_hardware_acceleration = true

[camera]
# Sony IMX500 AI Camera with picamera2
interface = picamera2
backup_interface = opencv
device_index = 0
resolution_width = 1920
resolution_height = 1080
framerate = 30
preview_enabled = false

# AI processing on camera
on_chip_processing = true
ai_model_format = tflite
confidence_threshold = 0.5

[radar]
# OPS243-C FMCW Doppler Radar
device_type = ops243c
interface = uart
port = /dev/ttyACM0
baudrate = 9600
timeout_seconds = 1.0
detection_range_meters = 50
speed_units = mph

# GPIO integration
use_gpio_control = true
power_pin = 18
reset_pin = 24

[machine_learning]
# TensorFlow Lite optimization for edge inference
framework = tensorflow_lite
model_format = tflite
input_size = [640, 640]
batch_size = 1
num_threads = 4
use_coral_delegate = false
use_gpu_delegate = true

# Vehicle detection model
detection_model_path = data/models/vehicle_detection.tflite
class_labels = ["car", "truck", "motorcycle", "bicycle"]
confidence_threshold = 0.5
nms_threshold = 0.4

# Multi-vehicle tracking (SORT algorithm)
enable_tracking = true
tracking_algorithm = sort
max_age = 30
min_hits = 3
iou_threshold = 0.3

[processing]
# Edge processing optimization
enable_edge_inference = true
parallel_processing = true
max_concurrent_frames = 2
frame_skip_factor = 1

# Data fusion settings
fusion_window_ms = 100
kalman_filter_enabled = true
temporal_smoothing = true

# Performance monitoring
monitor_system_health = true
health_check_interval_seconds = 30
log_performance_metrics = true

[database]
# SQLite for edge deployment
type = sqlite
path = data/traffic_data.db
connection_pool_size = 5
auto_vacuum = incremental
journal_mode = wal
synchronous = normal

# Data retention
max_detection_records = 100000
max_speed_records = 50000
cleanup_interval_hours = 24

[api]
# Flask-SocketIO for real-time communication
framework = flask_socketio
host = 0.0.0.0
port = 5000
debug = false
enable_cors = true
cors_origins = ["*"]

# WebSocket settings
enable_websockets = true
websocket_events = ["detection", "speed", "health"]
broadcast_interval_ms = 100

# API endpoints
enable_rest_api = true
api_prefix = /api/v1
rate_limiting_enabled = true
max_requests_per_minute = 1000

[logging]
# Structured logging
level = INFO
format = json
log_file = logs/traffic_monitoring.log
max_file_size_mb = 100
backup_count = 5

# Performance logging
log_inference_times = true
log_memory_usage = true
log_gpu_metrics = true

[networking]
# Network optimization
enable_compression = true
compression_level = 6
keep_alive_timeout = 60
max_connections = 100

# Cloud integration (optional)
enable_cloud_sync = false
cloud_endpoint = https://api.example.com/traffic-data
sync_interval_minutes = 15

[security]
# Basic security settings
enable_authentication = false
api_key_required = false
ssl_enabled = false
allowed_ips = ["192.168.1.0/24", "10.0.0.0/8"]

[deployment]
# Container deployment settings
container_runtime = docker
base_image = python:3.11-slim
enable_gpu_access = true
privileged_mode = true

# Hardware access
device_mappings = [
    "/dev/video0:/dev/video0",
    "/dev/ttyACM0:/dev/ttyACM0",
    "/dev/gpiomem:/dev/gpiomem"
]

# Volume mounts
volume_mappings = [
    "/mnt/storage/data:/mnt/storage/data",
    "/mnt/storage/logs/docker:/mnt/storage/logs/docker",
    "/mnt/storage/config:/mnt/storage/config"
]

[monitoring]
# System health monitoring
cpu_threshold_percent = 80
memory_threshold_percent = 85
gpu_temp_threshold_celsius = 70
disk_usage_threshold_percent = 90

# Performance alerts
enable_alerts = true
alert_webhook_url = ""
alert_email = ""

# Metrics collection
collect_system_metrics = true
metrics_retention_days = 7
export_prometheus_metrics = false

[optimization]
# Raspberry Pi 5 specific optimizations
enable_arm_optimizations = true
use_neon_instructions = true
memory_pool_size_mb = 256
gpu_memory_split = 128

# Power management
cpu_governor = performance
gpu_frequency_mhz = 800
enable_turbo_mode = true

# Storage optimization
use_tmpfs_for_temp = true
tmpfs_size_mb = 512
enable_disk_compression = false
