# =============================================================================
# Vehicle Detection System - Complete Configuration Template
# =============================================================================
# This file documents ALL available configuration options.
# Copy to .env and customize for your deployment.
#
# Quick Start:
#   1. cp .env.template .env
#   2. Generate secrets: python config/generate_secrets.py >> .env
#   3. Adjust paths and ROI coordinates for your setup
#   4. Set ENVIRONMENT=development for testing, production for deployment
#
# DO NOT commit .env to version control (it's in .gitignore).

# =============================================================================
# SYSTEM SETTINGS
# =============================================================================
# Environment: development, production, or testing
ENVIRONMENT=production

# Location identifier for multi-site deployments
LOCATION_ID=default_location

# Timezone for timestamps (e.g., America/Phoenix, UTC, America/New_York)
TIMEZONE=America/Phoenix

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis server connection
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
# REDIS_PASSWORD=your_redis_password_here  # Uncomment if using Redis auth

# Redis connection pool
REDIS_MAX_CONNECTIONS=50

# Redis key naming (advanced - usually leave as default)
DHT22_REDIS_KEY=weather:dht22

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# SQLite database path (absolute or relative)
DATABASE_PATH=/app/data/traffic_data.db

# Database performance tuning
BATCH_SIZE=100
COMMIT_INTERVAL_SEC=30

# Data retention (days to keep historical data)
RETENTION_DAYS=90

# =============================================================================
# API GATEWAY CONFIGURATION
# =============================================================================
# API server binding
API_HOST=0.0.0.0
API_PORT=5000

# Development mode (NEVER use debug=true in production!)
API_DEBUG=false

# Number of worker processes
API_WORKERS=4

# Swagger documentation
SWAGGER_ENABLED=true

# =============================================================================
# CAMERA (IMX500) CONFIGURATION
# =============================================================================
# Directory for captured images
CAMERA_CAPTURE_DIR=/mnt/storage/camera_capture

# AI model path
IMX500_MODEL_PATH=/usr/share/imx500-models/imx500_network_ssd_mobilenetv2_fpnlite_320x320_pp.rpk

# Capture settings
CAPTURE_INTERVAL=1.0
AI_CONFIDENCE_THRESHOLD=0.5
MAX_STORED_IMAGES=100

# Region of Interest (ROI) - normalized coordinates (0.0 to 1.0)
# These define the area of the image to analyze for vehicles
STREET_ROI_X_START=0.15  # 15% from left edge
STREET_ROI_X_END=0.85    # 85% from left edge
STREET_ROI_Y_START=0.5   # 50% from top (excludes cross street)
STREET_ROI_Y_END=0.9     # 90% from top

# Periodic snapshots
SNAPSHOT_INTERVAL_MINUTES=10
# PERIODIC_SNAPSHOT_PATH=/mnt/storage/snapshots  # Uncomment to enable

# =============================================================================
# RADAR (OPS243) CONFIGURATION
# =============================================================================
# UART connection
RADAR_UART_PORT=/dev/ttyAMA0
RADAR_BAUD_RATE=19200

# Speed units: mph, kph, or mps
RADAR_SPEED_UNITS=mph

# =============================================================================
# WEATHER (DHT22) CONFIGURATION
# =============================================================================
# GPIO pin number (BCM numbering)
DHT22_GPIO_PIN=4

# Update interval in seconds (600 = 10 minutes)
DHT22_UPDATE_INTERVAL=600

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log directory
LOG_DIR=/var/log/vehicle-detection

# Centralized logging (optional)
ENABLE_LOG_SHIPPING=false
# CENTRAL_LOG_URL=https://your-log-aggregator.com/api/logs

# =============================================================================
# MAINTENANCE CONFIGURATION
# =============================================================================
# Disk space thresholds (percentage)
MAINTENANCE_WARNING_THRESHOLD=80.0
MAINTENANCE_EMERGENCY_THRESHOLD=90.0

# File retention times (hours unless specified)
MAINTENANCE_IMAGE_MAX_AGE_HOURS=24.0
MAINTENANCE_SNAPSHOT_MAX_AGE_HOURS=168.0  # 1 week

# Maximum file counts
MAINTENANCE_MAX_LIVE_IMAGES=500

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Flask secret key (generate with: python -c "import secrets; print(secrets.token_hex(32))")
SECRET_KEY=generate_a_random_secret_key_here

# JWT secret for token signing
JWT_SECRET=generate_a_different_random_secret_here

# HTTPS configuration (optional)
HTTPS_ENABLED=false
# HTTPS_CERT_PATH=/path/to/cert.pem
# HTTPS_KEY_PATH=/path/to/key.pem

# =============================================================================
# LEGACY SETTINGS (for backward compatibility with existing docker-compose)
# =============================================================================
# These are maintained for existing deployment scripts

# Host user mapping
HOST_UID=1000
HOST_GID=1000
DOCKER_USER=1000:1000

# Storage paths
STORAGE_ROOT=/mnt/storage
REDIS_DATA_PATH=/mnt/storage/redis_data
POSTGRES_DATA_PATH=/mnt/storage/postgres_data
LOGS_PATH=/mnt/storage/logs
CONTAINER_ACCESSIBLE_PATH=/mnt/storage/container-accessible

# Docker configuration
DOCKER_IMAGE=gcumerk/cst590-capstone-public:latest
COMPOSE_PROJECT_NAME=traffic_monitoring
DEPLOY_USER=merk

# PostgreSQL (if used instead of SQLite)
POSTGRES_DB=traffic_monitoring
POSTGRES_USER=traffic_user
POSTGRES_PASSWORD=CHANGE_ME_STRONG_PASSWORD

# =============================================================================
# NOTES
# =============================================================================
# 1. Generate secrets with: python config/generate_secrets.py >> .env
# 2. Adjust ROI coordinates based on your camera placement
# 3. Set ENVIRONMENT=development for local testing
# 4. Review LOG_LEVEL - use DEBUG for troubleshooting, INFO for production
# 5. Adjust retention settings based on available storage
# 6. For production deployments, review all CHANGE_ME values
